---
- name: Create directory
  ansible.windows.win_file:
    path: "{{ runner_dir_win }}"
    state: directory

- name: Set runner_version variable (If latest)
  ansible.builtin.set_fact:
    runner_version: "{{ api_response.json.tag_name | regex_replace('^v', '') }}"
  when: runner_version == "latest"

- name: Check if desired version already installed
  ansible.windows.win_command: "findstr {{ runner_version }} {{ runner_dir_win }}\\bin\\Runner.Listener.deps.json"
  register: runner_installed
  check_mode: false
  changed_when: false
  ignore_errors: true

- name: Download Runner Agent Zip
  ansible.windows.win_get_url:
    url: "https://github.com/{{ runner_download_repository }}/releases/download/v{{ runner_version }}/actions-runner-{{ runner_system }}-{{ github_actions_architecture }}-{{ runner_version }}.zip"
    dest: "{{ runner_dir_win }}\\runner-{{ runner_version }}.zip"
  when: runner_version not in runner_installed.stdout or reinstall_runner

- name: Unarchive runner package
  win_unzip:
    src: "{{ runner_dir_win }}\\runner-{{ runner_version }}.zip"
    dest: "{{ runner_dir_win }}"
    delete_archive: true
  environment:
    PATH: \{{ ansible_env.USERPROFILE }}\;{{ ansible_env.Path }}\
  ignore_errors: true
  when: runner_version not in runner_installed.stdout or reinstall_runner

- name: Configure custom env file if required
  win_shell: echo "{{ custom_env }}" > "{{ runner_dir_win }}/.env"
  args:
    executable: cmd
  when: custom_env is defined

- name: Set complete GitHub url for repo runner
  ansible.builtin.set_fact:
    github_full_url: "{{ github_url }}/{{ github_owner | default(github_account) }}/{{ github_repo }}"
  when: not runner_org

- name: Set complete GitHub url for org runner
  ansible.builtin.set_fact:
    github_full_url: "{{ github_url }}/{{ github_owner | default(github_account) }}"
  when: runner_org | bool

- name: Register runner
  environment:
    RUNNER_ALLOW_RUNASROOT: "1"
  ansible.windows.win_shell:
    "{{ runner_dir_win }}\\config.cmd \
    --url {{ github_full_url }} \
    --token {{ registration.json.token }} \
    --name '{{ runner_name }}' \
    --labels {{ runner_labels | join(',') }} \
    --runnergroup {{ runner_group }} \
    --unattended \
    {{ runner_extra_config_args }}"
  args:
    chdir: "{{ runner_dir_win }}"
  become_user: "{{ runner_user }}"
  no_log: false #"{{ hide_sensitive_logs | bool }}"
  when: runner_name not in registered_runners.json.runners|map(attribute='name')|list 

- name: Replace registered runner
  environment:
    RUNNER_ALLOW_RUNASROOT: "1"
  ansible.windows.win_command:
    "{{ runner_dir_win }}\\config.cmd \
    --url {{ github_full_url }} \
    --token {{ registration.json.token }} \
    --name '{{ runner_name }}' \
    --labels {{ runner_labels | join(',') }} \
    --unattended \
    {{ runner_extra_config_args }} \
    --replace"
  args:
    chdir: "{{ runner_dir_win }}"
  become_user: "{{ runner_user }}"
  no_log: "{{ hide_sensitive_logs | bool }}"
  when: runner_name in registered_runners.json.runners|map(attribute='name')|list and reinstall_runner and not runner_org

- name: START and enable Github Actions Runner service 
  win_service:
    name: "actions.runner.service"
    display_name: "Self Hosted Runner GitHub"
    description: "Self Hosted Runner for Windows"
    path: "{{ runner_dir_win }}\\bin\\RunnerService.exe"
    start_mode: auto
    state: started
  when: runner_state|lower == "started"
 
- name: STOP and disable Github Actions Runner service
  win_service:
    name: "actions.runner.service"
    state: stopped
  when: runner_state|lower == "stopped"

- name: RESTART Github Actions Runner service
  win_service:
    name: "actions.runner.service"
    state: restarted
  when: runner_version not in runner_installed.stdout and not runner_state|lower == "stopped"
